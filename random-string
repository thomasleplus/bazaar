#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

########
# Help #
########
print_help() {
	echo "Generates a random string of desired length using chosen alphabet."
	echo
	echo "Syntax: random-string [OPTIONS]"
	echo
	echo "Options:"
	echo "-a STRING   Choose the alphabet as an ASCII string,"
	echo "            e.g. '0123456789abcdef'."
	echo "-h          Print this help."
	echo "-n LENGTH   Choose the length of the output string."
	echo "-r RANGE    Choose the alphabet as an ASCII range,"
	echo "            e.g. '0-9A-F' or '[:alnum:]'."
	echo "-v          Enable verbose output."
	echo
}

####################
# Options handling #
####################
while getopts ":va:hn:r:v" o; do
	case "${o}" in
	a)
		alphabet="${OPTARG}"
		;;
	h)
		print_help
		exit
		;;
	n)
		length="${OPTARG}"
		;;
	r)
		range="${OPTARG}"
		;;
	v)
		DEBUG=true
		;;
	"?")
		>&2 echo "random-string: error: unknow option -${OPTARG}"
		exit 1
		;;
	":")
		>&2 echo "random-string: error: missing argument for option -${OPTARG}"
		exit 1
		;;
	*)
		>&2 echo "random-string: error: unexpected error while parsing options"
		exit 1
		;;
	esac
done

if [[ -z ${length+x} ]]; then
	>&2 echo 'random-string: error: missing option: -n LENGTH'
	exit 1
fi

if [[ "${length}" =~ [^0-9] ]]; then
	>&2 echo "random-string: error: invalid -n argument: ${length} is not a number"
	exit 1
fi

if [[ -z ${alphabet+x} ]] && [[ -z ${range+x} ]]; then
	>&2 echo 'random-string: error: missing option: -a STRING or -r RANGE'
	exit 1
fi

if [[ -n ${alphabet+x} ]] && [[ -n ${range+x} ]]; then
	>&2 echo 'random-string: error: options -a and -r cannot be used together'
	exit 1
fi

if [[ -z ${DEBUG+x} ]]; then
	DEBUG=false
fi

################
# Main program #
################

function int_to_char {
	[ "${1}" -lt 256 ] || return 1
	# shellcheck disable=SC2059 # this is the way
	printf "\\$(printf '%03o' "${1}")"
}

function join_by {
	local IFS="${1}"
	shift
	echo "${*}"
}

if [ -f /.dockerenv ]; then
	>&2 echo 'random-string: warn: running in Docker, available entropy may be limited'
fi

alphabet_array=()
if [[ -n ${range+x} ]]; then
	if [ "${DEBUG}" = true ]; then
		>&2 echo "random-string: debug: converting range '${range}' to alphabet"
	fi
	for i in {0..255}; do
		c="$(int_to_char "${i}")"
		if [[ "${c}" =~ ^[${range}]$ ]]; then
			alphabet_array+=("${c}")
		fi
	done
else
	if [ "${DEBUG}" = true ]; then
		>&2 echo "random-string: debug: converting alphabet '${alphabet}' to array"
	fi
	while IFS='' read -r l; do alphabet_array+=("${l}"); done < <(echo "${alphabet}" | \grep -o . | \sort | \uniq)
fi
if [ "${DEBUG}" = true ]; then
	>&2 echo "random-string: debug: final alphabet is: $(join_by ' ' "${alphabet_array[@]}")"
fi
# let's calculate the modulo
m="${#alphabet_array[@]}"
for i in $(\seq "${length}"); do
	r=$((RANDOM % m))
	printf '%s' "${alphabet_array[${r}]}"
done
echo
